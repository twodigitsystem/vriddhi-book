generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model User {
  id            String  @id @default(cuid())
  name          String
  email         String
  emailVerified Boolean @default(false)
  image         String?
  imageKey      String? // Optional, for storing image in cloud storage

  // orgId               String
  // orgName             String?
  // organization        Organization @relation(fields: [orgId], references: [id], onDelete: Cascade)
  // roles               Role[]       @relation("UserRoles")
  // permissions         String[]
  // --- Onboarding Fields ---
  businessName        String?
  gstin               String?
  phoneNumber         String?
  businessAddress     String?
  businessType        String? // Consider Prisma Enum if types are static
  businessCategory    String? // Consider Prisma Enum if categories are static
  pincode             String?
  state               String? // Indian State
  businessDescription String? @db.Text // Use Text for potentially longer descriptions
  isOnboarded         Boolean @default(false) // Flag for completion

  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt
  twoFactorEnabled Boolean  @default(false)

  organizationName String?
  sessions         Session[]
  accounts         Account[]
  // members          Member[]
  // invitations      Invitation[]

  @@unique([email])
  @@map("user")
}

model Session {
  id        String   @id @default(cuid())
  expiresAt DateTime
  token     String   @unique
  ipAddress String?
  userAgent String?
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  activeOrganizationId String?

  @@map("session")
}

model Account {
  id           String    @id @default(cuid())
  accountId    String
  providerId   String
  userId       String
  user         User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  accessToken  String?
  refreshToken String?
  idToken      String?
  expiresAt    DateTime?
  password     String?
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt

  accessTokenExpiresAt  DateTime?
  refreshTokenExpiresAt DateTime?
  scope                 String?

  @@map("account")
}

model Verification {
  id         String    @id @default(cuid())
  identifier String
  value      String
  expiresAt  DateTime
  createdAt  DateTime? @default(now())
  updatedAt  DateTime? @updatedAt

  @@map("verification")
}

// model Role {
//   id           String       @id @default(cuid())
//   name         String // Human-readable name for the role (e.g., "Store Manager")
//   slug         String       @unique // Unique slug for URL-friendly role identifier
//   description  String? // Optional description for the role
//   organization Organization @relation(fields: [orgId], references: [id], onDelete: Cascade)
//   orgId        String // Organization ID to which this role belongs
//   permissions  String[] // Array of permissions associated with this role
//   createdAt    DateTime     @default(now())
//   updatedAt    DateTime     @updatedAt

//   users User[] @relation("UserRoles")

//   // Ensure unique role names within the same organization
//   // Index for faster lookups by slug
//   @@unique([name, orgId])
//   @@index([slug])
//   @@map("role")
// }

// model Organization {
//   id          String   @id @default(cuid())
//   name        String
//   slug        String   @unique // Unique slug for URL-friendly organization identifier
//   description String? // Optional description for the organization
//   logo        String? // Optional URL for the organization's logo
//   logoKey     String? // Optional key for storing logo in cloud storage
//   isActive    Boolean  @default(true) // Flag to indicate if the organization is active
//   isDefault   Boolean  @default(false) // Flag to indicate if this is the default organization
//   industry    String? // Optional industry type for the organization
//   website     String? // Optional website URL for the organization
//   state       String? // Optional state for the organization, could be used for location
//   address     String? // Optional physical address for the organization
//   createdAt   DateTime @default(now())
//   updatedAt   DateTime @updatedAt

//   users User[]
//   Role  Role[]

//   metadata    String?
//   members     Member[]
//   invitations Invitation[]

//   @@map("organization")
// }

// model Member {
//   id             String       @id
//   organizationId String
//   organization   Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)
//   userId         String
//   user           User         @relation(fields: [userId], references: [id], onDelete: Cascade)
//   role           String
//   createdAt      DateTime

//   @@map("member")
// }

// model Invitation {
//   id             String       @id
//   organizationId String
//   organization   Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)
//   email          String
//   role           String?
//   status         String
//   expiresAt      DateTime
//   inviterId      String
//   user           User         @relation(fields: [inviterId], references: [id], onDelete: Cascade)

//   @@map("invitation")
// }
