generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model User {
  id               String       @id @default(cuid())
  name             String
  email            String       @unique
  emailVerified    Boolean      @default(false)
  image            String?
  imageKey         String?
  phoneNumber      String?
  createdAt        DateTime     @default(now())
  updatedAt        DateTime     @updatedAt
  twoFactorEnabled Boolean      @default(false)
  fileUploads      FileUpload[]
  accounts         Account[]
  AuditLog         AuditLog[]
  invitations      Invitation[]
  members          Member[]
  sessions         Session[]

  @@map("user")
}

model Session {
  id                   String   @id @default(cuid())
  expiresAt            DateTime
  token                String   @unique
  ipAddress            String?
  userAgent            String?
  userId               String
  createdAt            DateTime @default(now())
  updatedAt            DateTime @updatedAt
  activeOrganizationId String?
  user                 User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([activeOrganizationId])
  @@index([expiresAt])
  @@map("session")
}

model Account {
  id                    String    @id @default(cuid())
  accountId             String
  providerId            String
  userId                String
  accessToken           String?
  refreshToken          String?
  idToken               String?
  expiresAt             DateTime?
  password              String?
  createdAt             DateTime  @default(now())
  updatedAt             DateTime  @updatedAt
  accessTokenExpiresAt  DateTime?
  refreshTokenExpiresAt DateTime?
  scope                 String?
  user                  User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("account")
}

model Verification {
  id         String    @id @default(cuid())
  identifier String
  value      String
  expiresAt  DateTime
  createdAt  DateTime? @default(now())
  updatedAt  DateTime? @updatedAt

  @@map("verification")
}

model Organization {
  id                  String             @id @default(cuid())
  name                String
  slug                String             @unique
  logo                String?
  createdAt           DateTime           @default(now())
  metadata            String?
  businessAddress     String?
  businessDescription String?
  businessType        String?
  country             String?            @default("India")
  currency            String?            @default("inr")
  gstin               String?
  phoneNumber         String?
  pincode             String?
  state               String?
  timeZone            String?            @default("Asia/Kolkata")
  updatedAt           DateTime           @updatedAt
  businessIndustry    String?
  customerCategories  CustomerCategory[]
  fileUploads         FileUpload[]
  payments            Payment[]
  auditLogs           AuditLog[]
  brands              Brand[]
  categories          Category[]
  customers           Customer[]
  designations        Designation[]
  expenses            Expense[]
  hsnCodes            HSNCode[]
  invitations         Invitation[]
  invoices            Invoice[]
  items               Item[]
  itemSettings        ItemSettings?
  ledgers             Ledger[]
  members             Member[]
  organizationroles   OrganizationRole[]
  serialNumbers       SerialNumber[]
  stockMovements      StockMovement[]
  suppliers           Supplier[]
  taxRates            TaxRate[]
  transactions        Transaction[]
  unitConversions     UnitConversion[]
  units               Unit[]
  warehouses          Warehouse[]

  @@map("organization")
}

model Member {
  id             String       @id
  organizationId String
  userId         String
  role           String
  createdAt      DateTime     @default(now())
  organization   Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  user           User         @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("member")
}

model Invitation {
  id             String       @id @default(cuid())
  organizationId String
  email          String
  role           String?
  status         String
  expiresAt      DateTime
  inviterId      String
  user           User         @relation(fields: [inviterId], references: [id], onDelete: Cascade)
  organization   Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)

  @@map("invitation")
}

model OrganizationRole {
  id             String       @id @default(cuid())
  slug           String?       @unique
  role           String
  permission     Json
  description    String?
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt
  createdBy      String?
  organizationId String
  organization   Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)

  @@index([organizationId])
  @@index([organizationId, role])
  @@map("organization_role")
}

model Designation {
  id             String       @id @default(cuid())
  name           String       @unique
  description    String?
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt
  organizationId String
  slug           String       @unique
  organization   Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)

  @@unique([organizationId, slug])
  @@map("designations")
}

model Category {
  id             String       @id @default(cuid())
  name           String
  description    String?
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt
  organizationId String
  slug           String
  organization   Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  items          Item[]

  @@unique([organizationId, slug])
  @@index([organizationId, slug])
  @@map("categories")
}

model CustomerCategory {
  id             String       @id @default(cuid())
  name           String       @unique
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt
  organizationId String
  organization   Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  customers      Customer[]
}

model Warehouse {
  id             String       @id @default(cuid())
  name           String
  address        String
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt
  organizationId String
  inventory      Inventory[]
  organization   Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)

  @@unique([organizationId, name])
  @@map("warehouses")
}

model Inventory {
  id          String    @id @default(cuid())
  quantity    Int
  updatedAt   DateTime  @updatedAt
  itemId      String
  warehouseId String
  items       Item      @relation(fields: [itemId], references: [id], onDelete: Cascade)
  warehouse   Warehouse @relation(fields: [warehouseId], references: [id], onDelete: Cascade)

  @@unique([itemId, warehouseId])
  @@map("inventory")
}

model Item {
  id               String            @id @default(cuid())
  name             String
  description      String?
  sku              String
  barcode          String?
  price            Decimal           @db.Decimal(14, 2)
  costPrice        Decimal           @db.Decimal(14, 2)
  minStock         Int               @default(0)
  maxStock         Int?
  isActive         Boolean           @default(true)
  type             ProductType       @default(GOODS)
  mfgDate          DateTime?
  expDate          DateTime?
  batchNo          String?
  createdAt        DateTime          @default(now())
  updatedAt        DateTime          @updatedAt
  organizationId   String
  categoryId       String?
  createdBy        String?           @map("created_by")
  deletedAt        DateTime?
  hsnCodeId        String?
  isRCMApplicable  Boolean           @default(false)
  reorderThreshold Int?              @default(10)
  serializable     Boolean           @default(false)
  updatedBy        String?           @map("updated_by")
  weight           Decimal?          @db.Decimal(10, 2)
  cessRate         Decimal?          @db.Decimal(5, 2)
  modelNo          String?
  mrp              Decimal?          @db.Decimal(14, 2)
  serialNo         String?
  size             String?
  taxRateId        String?
  unitId           String?
  dimensions       String?
  ean              String?
  isbn             String?
  mpn              String?
  openingStockDate DateTime?         @default(now())
  openingStockQty  Int?              @default(0)
  openingStockRate Decimal?          @db.Decimal(14, 2)
  upc              String?
  images           String[]          @default(["https://www.flaticon.com/free-icon/picture_10446694?term=placeholder+image&page=1&position=2&origin=search&related_id=10446694"])
  inventory        Inventory[]
  invoiceItems     InvoiceItem[]
  category         Category?         @relation(fields: [categoryId], references: [id])
  hsnCode          HSNCode?          @relation(fields: [hsnCodeId], references: [id])
  organization     Organization      @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  taxRate          TaxRate?          @relation(fields: [taxRateId], references: [id])
  unit             Unit?             @relation(fields: [unitId], references: [id])
  serialNumbers    SerialNumber[]
  stockMovements   StockMovement[]
  transactionItems TransactionItem[]
  suppliers        Supplier[]        @relation("ItemSuppliers")

  @@unique([organizationId, sku])
  @@index([sku])
  @@index([name])
  @@index([barcode])
  @@index([hsnCodeId])
  @@index([taxRateId])
  @@map("item")
}

model StockMovement {
  id             String            @id @default(cuid())
  itemId         String
  organizationId String
  type           StockMovementType
  quantity       Float
  reason         String?
  referenceId    String?
  movedAt        DateTime          @default(now())
  item           Item              @relation(fields: [itemId], references: [id], onDelete: Cascade)
  organization   Organization      @relation(fields: [organizationId], references: [id], onDelete: Cascade)

  @@index([itemId])
  @@index([organizationId])
  @@index([type])
  @@map("stock_movements")
}

model TaxRate {
  id                  String        @id @default(cuid())
  name                String
  rate                Decimal       @db.Decimal(5, 2)
  cgstRate            Decimal?      @db.Decimal(5, 2)
  sgstRate            Decimal?      @db.Decimal(5, 2)
  igstRate            Decimal?      @db.Decimal(5, 2)
  isCompositionScheme Boolean       @default(false)
  description         String?
  organizationId      String
  createdAt           DateTime      @default(now())
  updatedAt           DateTime      @updatedAt
  hsnCodes            HSNCode[]
  invoiceItems        InvoiceItem[]
  items               Item[]
  organization        Organization  @relation(fields: [organizationId], references: [id], onDelete: Cascade)

  @@unique([organizationId, name])
  @@index([rate])
  @@map("tax_rate")
}

model ItemSettings {
  id                                String       @id @default(cuid())
  createdAt                         DateTime     @default(now())
  updatedAt                         DateTime     @updatedAt
  organizationId                    String       @unique
  showMfgDate                       Boolean      @default(false)
  showExpDate                       Boolean      @default(false)
  showBatchNo                       Boolean      @default(false)
  allowServices                     Boolean      @default(true)
  allowStockAdjustment              Boolean      @default(true)
  allowStockTransfer                Boolean      @default(true)
  showBarcodeScanning               Boolean      @default(true)
  showBrand                         Boolean      @default(false)
  showHSNCode                       Boolean      @default(false)
  showItemDescription               Boolean      @default(true)
  showItemImages                    Boolean      @default(true)
  showItemWiseCostPrice             Boolean      @default(true)
  showItemWiseDiscount              Boolean      @default(true)
  showItemWiseMRP                   Boolean      @default(true)
  showItemWiseRate                  Boolean      @default(true)
  showItemWiseTax                   Boolean      @default(true)
  showItemWiseWholesalePrice        Boolean      @default(true)
  showModelNo                       Boolean      @default(false)
  showPartyWiseItemRate             Boolean      @default(true)
  showSalePriceFromTransaction      Boolean      @default(false)
  showSerialNo                      Boolean      @default(false)
  showUnit                          Boolean      @default(true)
  showWholesalePriceFromTransaction Boolean      @default(false)
  stockAlertThreshold               Int?         @default(10)
  organization                      Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)

  @@map("item_settings")
}

model Transaction {
  id             String            @id @default(cuid())
  type           TransactionType
  reference      String?
  notes          String?
  date           DateTime          @default(now())
  createdAt      DateTime          @default(now())
  updatedAt      DateTime          @updatedAt
  organizationId String
  cgstAmount     Decimal?          @db.Decimal(14, 2)
  igstAmount     Decimal?          @db.Decimal(14, 2)
  irn            String?
  sgstAmount     Decimal?          @db.Decimal(14, 2)
  supplierId     String?
  totalTaxAmount Decimal?          @db.Decimal(14, 2)
  items          TransactionItem[]
  organization   Organization      @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  supplier       Supplier?         @relation(fields: [supplierId], references: [id])

  @@map("transactions")
}

model TransactionItem {
  id            String      @id @default(cuid())
  quantity      Int
  unitCost      Decimal     @db.Decimal(10, 2)
  transactionId String
  itemId        String
  item          Item        @relation(fields: [itemId], references: [id], onDelete: Cascade)
  transaction   Transaction @relation(fields: [transactionId], references: [id], onDelete: Cascade)

  @@map("transaction_items")
}

model AuditLog {
  id             String       @id @default(cuid())
  action         String
  entityId       String
  entityType     String
  description    String?
  changes        Json?
  metadata       Json?        // Additional context data (IP, user agent, etc.)
  createdAt      DateTime     @default(now())
  userId         String?
  organizationId String
  organization   Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  performedBy    User?        @relation(fields: [userId], references: [id])

  @@index([organizationId])
  @@index([entityId, entityType])
  @@map("audit_logs")
}

model Supplier {
  id             String        @id @default(cuid())
  name           String
  description    String?
  organizationId String
  createdAt      DateTime      @default(now())
  updatedAt      DateTime      @updatedAt
  address        String?
  bankDetails    Json?
  city           String?
  contactPerson  String?
  country        String?
  email          String?
  gstin          String?
  pan            String?
  phone          String?
  pincode        String?
  state          String?
  expenses       Expense[]
  organization   Organization  @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  transactions   Transaction[]
  items          Item[]        @relation("ItemSuppliers")

  @@map("supplier")
}

model HSNCode {
  id               String        @id @default(cuid())
  code             String
  description      String
  organizationId   String?
  createdAt        DateTime      @default(now())
  updatedAt        DateTime      @updatedAt
  defaultTaxRateId String?
  isSystemCode     Boolean       @default(false)
  defaultTaxRate   TaxRate?      @relation(fields: [defaultTaxRateId], references: [id])
  organization     Organization? @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  invoiceItems     InvoiceItem[]
  items            Item[]

  @@unique([code, organizationId], name: "unique_hsn_code_per_organization")
  @@index([organizationId])
  @@index([defaultTaxRateId])
  @@map("hsn_code")
}

model Brand {
  id             String       @id @default(cuid())
  name           String
  description    String?
  organizationId String
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt
  slug           String
  organization   Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)

  @@unique([organizationId, slug])
  @@map("brand")
}

model Unit {
  id                   String           @id @default(cuid())
  name                 String
  shortName            String
  createdAt            DateTime         @default(now())
  updatedAt            DateTime         @updatedAt
  organizationId       String
  items                Item[]
  baseConversions      UnitConversion[] @relation("BaseUnit")
  secondaryConversions UnitConversion[] @relation("SecondaryUnit")
  organization         Organization     @relation(fields: [organizationId], references: [id], onDelete: Cascade)

  @@unique([organizationId, name])
  @@map("units")
}

model UnitConversion {
  id               String       @id @default(cuid())
  conversionFactor Decimal      @db.Decimal(10, 5)
  organizationId   String
  baseUnitId       String
  secondaryUnitId  String
  createdAt        DateTime     @default(now())
  updatedAt        DateTime     @updatedAt
  baseUnit         Unit         @relation("BaseUnit", fields: [baseUnitId], references: [id], onDelete: Cascade)
  organization     Organization @relation(fields: [organizationId], references: [id], onDelete: NoAction)
  secondaryUnit    Unit         @relation("SecondaryUnit", fields: [secondaryUnitId], references: [id], onDelete: Cascade)

  @@unique([organizationId, baseUnitId, secondaryUnitId])
  @@map("unit_conversions")
}

model SerialNumber {
  id             String       @id @default(cuid())
  itemId         String
  serialNo       String       @unique
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt
  organizationId String
  notes          String?
  status         SerialStatus @default(IN_STOCK)
  item           Item         @relation(fields: [itemId], references: [id], onDelete: Cascade)
  organization   Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)

  @@map("serial_number")
}

model Customer {
  id                  String            @id @default(cuid())
  email               String?
  organizationId      String
  createdAt           DateTime          @default(now())
  updatedAt           DateTime          @updatedAt
  gstin               String?
  companyName         String?
  contactPersons      Json?
  currency            String?           @default("inr")
  customFields        Json?
  customerCategoryId  String?
  customerDisplayName String?
  customerType        CustomerType      @default(BUSINESS)
  department          String?
  designation         String?
  facebook            String?
  firstName           String?
  lastName            String?
  mobile              String?
  pan                 String?
  paymentTerms        String?
  receivable          Decimal           @default(0) @db.Decimal(14, 2)
  remarks             String?
  reportingTags       String?
  skype               String?
  taxPreference       TaxPreference     @default(TAXABLE)
  twitter             String?
  website             String?
  workPhone           String?
  billingAddressId    String?
  shippingAddressId   String?
  billingAddress      Address?          @relation("BillingAddress")
  shippingAddress     Address?          @relation("ShippingAddress")
  customerCategory    CustomerCategory? @relation(fields: [customerCategoryId], references: [id])
  organization        Organization      @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  invoices            Invoice[]

  @@unique([organizationId, email])
  @@index([email])
  @@map("customer")
}

model Address {
  id                 String    @id @default(cuid())
  addressLine1       String?
  addressLine2       String?
  city               String?
  state              String?
  zip                String?
  phone              String?
  fax                String?
  customerBillingId  String?   @unique
  customerShippingId String?   @unique
  customerBilling    Customer? @relation("BillingAddress", fields: [customerBillingId], references: [id])
  customerShipping   Customer? @relation("ShippingAddress", fields: [customerShippingId], references: [id])
}

model Invoice {
  id                  String        @id @default(cuid())
  invoiceNumber       String
  status              InvoiceStatus @default(DRAFT)
  issueDate           DateTime      @default(now())
  dueDate             DateTime?
  subtotal            Decimal       @db.Decimal(14, 2)
  totalDiscountAmount Decimal       @default(0) @db.Decimal(14, 2)
  totalTaxAmount      Decimal       @default(0) @db.Decimal(14, 2)
  grandTotal          Decimal       @db.Decimal(14, 2)
  notes               String?
  termsAndConditions  String?
  createdAt           DateTime      @default(now())
  updatedAt           DateTime      @updatedAt
  organizationId      String
  customerId          String
  payments            Payment[]
  items               InvoiceItem[]
  customer            Customer      @relation(fields: [customerId], references: [id], onDelete: Cascade)
  organization        Organization  @relation(fields: [organizationId], references: [id], onDelete: Cascade)

  @@unique([organizationId, invoiceNumber])
  @@index([organizationId])
  @@index([customerId])
  @@index([invoiceNumber])
  @@map("invoices")
}

model InvoiceItem {
  id            String        @id @default(cuid())
  description   String
  quantity      Int
  unitPrice     Decimal       @db.Decimal(14, 2)
  discountType  DiscountType? @default(PERCENTAGE)
  discountValue Decimal?      @default(0) @db.Decimal(12, 2)
  totalPrice    Decimal       @db.Decimal(12, 2)
  hsnCodeId     String?
  taxRateId     String?
  cgstRate      Decimal?      @default(0) @db.Decimal(5, 2)
  sgstRate      Decimal?      @default(0) @db.Decimal(5, 2)
  igstRate      Decimal?      @default(0) @db.Decimal(5, 2)
  cgstAmount    Decimal?      @default(0) @db.Decimal(12, 2)
  sgstAmount    Decimal?      @default(0) @db.Decimal(12, 2)
  igstAmount    Decimal?      @default(0) @db.Decimal(12, 2)
  taxableAmount Decimal       @db.Decimal(12, 2)
  netAmount     Decimal       @db.Decimal(12, 2)
  invoiceId     String
  itemId        String?
  hsnCode       HSNCode?      @relation(fields: [hsnCodeId], references: [id], onDelete: Cascade)
  invoice       Invoice       @relation(fields: [invoiceId], references: [id], onDelete: Cascade)
  item          Item?         @relation(fields: [itemId], references: [id])
  taxRate       TaxRate?      @relation(fields: [taxRateId], references: [id], onDelete: Cascade)

  @@map("invoice_items")
}

model Payment {
  id             String        @id @default(cuid())
  invoiceId      String
  organizationId String
  amount         Decimal       @db.Decimal(12, 2)
  paymentDate    DateTime
  paymentMethod  PaymentMethod
  reference      String?
  notes          String?
  createdById    String?
  createdAt      DateTime      @default(now())
  updatedAt      DateTime      @updatedAt
  invoice        Invoice       @relation(fields: [invoiceId], references: [id])
  organization   Organization  @relation(fields: [organizationId], references: [id], onDelete: Cascade)

  @@index([invoiceId])
  @@index([organizationId])
}

model Expense {
  id             String       @id @default(cuid())
  description    String
  amount         Decimal      @db.Decimal(14, 2)
  date           DateTime     @default(now())
  receipt        String?
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt
  organizationId String
  supplierId     String?
  ledgerId       String?
  ledger         Ledger?      @relation(fields: [ledgerId], references: [id])
  organization   Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  supplier       Supplier?    @relation(fields: [supplierId], references: [id])

  @@map("expenses")
}

model Ledger {
  id             String       @id @default(cuid())
  name           String
  type           LedgerType
  amount         Decimal      @default(0) @db.Decimal(15, 2)
  date           DateTime     @default(now())
  isActive       Boolean      @default(true)
  description    String?
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt
  organizationId String
  expenses       Expense[]
  organization   Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)

  @@map("ledgers")
}

model FileUpload {
  id             String       @id @default(cuid())
  key            String       @unique
  name           String
  url            String       @unique
  size           Int
  fileType       String
  uploadedById   String?
  organizationId String
  entityType     String?
  entityId       String?
  createdAt      DateTime     @default(now())
  organization   Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  uploadedBy     User?        @relation(fields: [uploadedById], references: [id])

  @@index([uploadedById])
  @@index([organizationId])
  @@index([entityType, entityId])
}

enum TransactionType {
  STOCK_IN
  STOCK_OUT
  ADJUSTMENT
  TRANSFER
}

enum ProductType {
  GOODS
  SERVICE
}

enum StockMovementType {
  PURCHASE
  SALE
  ADJUSTMENT_ADD
  ADJUSTMENT_SUBTRACT
  RETURN_CUSTOMER
  RETURN_SUPPLIER
  OPENING_STOCK
  WASTAGE
  INTERNAL_TRANSFER
}

enum SerialStatus {
  IN_STOCK
  SOLD
  RESERVED
  DAMAGED
  RETURNED
}

enum CustomerType {
  BUSINESS
  INDIVIDUAL
}

enum TaxPreference {
  TAXABLE
  NON_TAXABLE
}

enum InvoiceStatus {
  DRAFT
  SENT
  PAID
  OVERDUE
  CANCELLED
}

enum DiscountType {
  PERCENTAGE
  FIXED_AMOUNT
}

enum PaymentMethod {
  CASH
  CREDIT_CARD
  DEBIT_CARD
  BANK_TRANSFER
  UPI
  CHEQUE
  WALLET
  OTHER
}

enum LedgerType {
  ASSET
  LIABILITY
  EQUITY
  REVENUE
  EXPENSE
}
