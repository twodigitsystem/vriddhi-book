
generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model User {
  id            String  @id @default(cuid())
  name          String
  email         String
  emailVerified Boolean @default(false)
  image         String?
  imageKey      String? // Optional, for storing image in cloud storage
  role          String  @default("owner") // Default role for new users

  // --- Onboarding Fields ---
  businessName        String?
  gstin               String?
  phoneNumber         String?
  businessAddress     String?
  businessType        String? // Consider Prisma Enum if types are static
  businessCategory    String? // Consider Prisma Enum if categories are static
  pincode             String?
  state               String? // Indian State
  businessDescription String? @db.Text // Use Text for potentially longer descriptions
  isOnboarded         Boolean @default(false) // Flag for completion

  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt
  twoFactorEnabled Boolean  @default(false)

  organizationName String?
  sessions         Session[]
  accounts         Account[]

  members     Member[]
  invitations Invitation[]

  @@unique([email])
  @@map("user")
}

model Session {
  id        String   @id @default(cuid())
  expiresAt DateTime
  token     String   @unique
  ipAddress String?
  userAgent String?
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  activeOrganizationId String?

  @@map("session")
}

model Account {
  id           String    @id @default(cuid())
  accountId    String
  providerId   String
  userId       String
  user         User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  accessToken  String?
  refreshToken String?
  idToken      String?
  expiresAt    DateTime?
  password     String?
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt

  accessTokenExpiresAt  DateTime?
  refreshTokenExpiresAt DateTime?
  scope                 String?

  @@map("account")
}

model Verification {
  id         String    @id @default(cuid())
  identifier String
  value      String
  expiresAt  DateTime
  createdAt  DateTime? @default(now())
  updatedAt  DateTime? @updatedAt

  @@map("verification")
}

model Organization {
  id          String       @id @default(cuid())
  name        String
  slug        String?
  logo        String?
  createdAt   DateTime
  metadata    String?
  members     Member[]
  invitations Invitation[]
  roles       Role[]

  @@unique([slug])
  @@map("organization")
}

model Member {
  id             String       @id @default(cuid())
  organizationId String
  organization   Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  userId         String
  user           User         @relation(fields: [userId], references: [id], onDelete: Cascade)
  role           String       @default("member") // Default role for members
  createdAt      DateTime
  Role           Role?        @relation(fields: [roleId], references: [id])
  roleId         String?

  @@map("member")
}

model Invitation {
  id             String       @id @default(cuid())
  organizationId String
  organization   Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  email          String
  role           String?
  status         String
  expiresAt      DateTime
  inviterId      String
  user           User         @relation(fields: [inviterId], references: [id], onDelete: Cascade)

  @@map("invitation")
}

model Role {
  id             String       @id @default(cuid())
  organizationId String
  organization   Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  name           String
  description    String?
  permissions    String[] // Array of permission strings
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt

  members Member[]

  @@map("role")
}

model InventoryItem {
  id              String    @id @default(cuid())
  name            String
  description     String?
  sku             String?
  unitOfMeasure   String?
  quantityInStock Int?
  reorderLevel    Int?
  purchasePrice   Decimal?
  sellingPrice    Decimal?
  category        Category? @relation(fields: [categoryId], references: [id], onDelete: SetNull)
  supplier        Supplier? @relation(fields: [supplierId], references: [id], onDelete: SetNull)
  hsnCode         HSNCode?  @relation("HSNCodeToInventoryItem", fields: [hsnCodeId], references: [id], onDelete: SetNull)
  categoryId      String?
  supplierId      String?
  hsnCodeId       String?
  organizationId  String
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt

  @@map("inventory_item")
}

model Category {
  id             String   @id @default(cuid())
  name           String
  description    String?
  organizationId String
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt

  inventoryItems InventoryItem[]

  @@map("category")
}

model Supplier {
  id             String   @id @default(cuid())
  name           String
  description    String?
  organizationId String
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt

  inventoryItems InventoryItem[]

  @@map("supplier")
}

model HSNCode {
  id             String   @id @default(cuid())
  code           String
  description    String?
  organizationId String
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt

  inventoryItems InventoryItem[] @relation("HSNCodeToInventoryItem")

  @@map("hsn_code")
}
